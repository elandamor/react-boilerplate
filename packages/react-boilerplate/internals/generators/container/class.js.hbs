import React, { {{{ type }}} } from 'react';
{{#if wantHeaders}}
import { Helmet } from 'react-helmet';
{{/if}}
import cls from 'classnames';
import PropTypes from 'prop-types';
import { compose, graphql } from 'react-apollo';
{{#if wantMutation}}
// Mutations
import {{ camelCase name }}GQL from '../../graphql/mutations/{{ camelCase name }}.gql';
{{/if}}
{{#if wantQuery}}
// Query
import {{ camelCase name }}GQL from '../../graphql/queries/{{ camelCase name }}.gql';
{{/if}}
// Styles
import Wrapper from './styles';

/**
 * @render react
 * @name {{ properCase name }} container
 * @description {{ properCase name }} container.
 * @example
 * <{{ properCase name }} />
 */
// eslint-disable-next-line react/prefer-stateless-function
export class {{ properCase name }} extends {{{ type }}} {
  componentWillReceiveProps({ error, expectedResult, loading }) {
    if (error || !loading) {
      // Handle data fetch error here
    }

    if (!loading && !error) {
      // Handle resolved data here
    }
  }

  render() {
    const { className } = this.props;

    return (
    {{#if wantHeaders}}
      <Wrapper className={cls('', className)}>
        <Helmet>
          <title>{{properCase name}}</title>
          <meta name="description" content="Description of {{properCase name}}" />
        </Helmet>
      </Wrapper>
    {{else}}
      <Wrapper className={cls('', className)} />
    {{/if}}
    );
  }
}

{{ properCase name }}.defaultProps = {
  className: '',
};

{{ properCase name }}.propTypes = {
  className: PropTypes.string,
  error: PropTypes.bool.isRequired,
  loading: PropTypes.bool.isRequired,
{{#if wantMutation}}
  {{ camelCase name }}: PropTypes.func.isRequired,
{{/if}}
};

{{#if wantQuery}}
const mapResultsToProps = ({ data }) => {
  if (data.error) {
    return {
      error: data.error,
      loading: data.loading,
    };
  }

  if (!data.expectedResult) {
    return {
      loading: data.loading,
    };
  }

  const { expectedResult } = data;

  return {
    loading: data.loading,
    expectedResult,
  };
};
{{/if}}

export default compose(
{{#if wantMutation}}
  graphql({{ camelCase name }}GQL, {
    // @doc https://www.apollographql.com/docs/react/basics/mutations.html
    name: '{{ camelCase name }}'
  }),
{{/if}}
{{#if wantQuery}}
  graphql({{ camelCase name }}GQL, {
    // @doc https://www.apollographql.com/docs/react/basics/queries.html
    props: mapResultsToProps,
  }),
{{/if}}
)({{ properCase name }});
