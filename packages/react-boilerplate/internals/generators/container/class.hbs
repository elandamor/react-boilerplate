import React, { {{{ type }}} } from 'react';
{{#if wantHeaders}}
import { Helmet } from 'react-helmet';
{{/if}}
import classNames from 'classnames';
// Styles
import Wrapper from './styles';

/**
 * @render react
 * @name {{ properCase name }} container
 * @description {{ properCase name }} container.
 * @example
 * <{{ properCase name }} />
 */

interface IProps {
  className?: string;
}

interface IState {
{{#if wantQuery}}
  hasResult: boolean;
  staleResult: any;
{{/if}}
  [key: string]: any;
}

class {{ properCase name }} extends Component<IProps, IState> {
  constructor(props: IProps) {
    super(props);
  {{#if wantQuery}}

    this.state = {
      hasResult: Boolean(props.expectedResult),
      // Persisted "expectedResult"
      staleResult: props.expectedResult,
    };

  {{/if}}
  }
{{#if wantQuery}}

  public componentWillReceiveProps(nextProps) {
    const { expectedResult, error, loading } = nextProps;

    if (!error && !loading) {
      const incomingResult = expectedResult;

      if (incomingResult !== undefined) {
        this.setState({
          hasResult: Boolean(incomingResult),
          staleResult: incomingResult,
        });
      }
    }
  }

{{/if}}
  public render() {
    const { className } = this.props;
  {{#if wantQuery}}
    const { hasResult, staleResult } = this.state;

    let expectedResult = null;

    expectedResult = hasResult && staleResult;

    return (
      <Wrapper className={classNames('c-expectedResult', className)}>
        { hasResult && expectedResult }
      </Wrapper>
    );
  {{else}}

    return (
      <Wrapper className={classNames('', className)} />
    );
  {{/if}}
  }
}

export default {{ properCase name }};
